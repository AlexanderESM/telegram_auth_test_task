package net.orekhov.telegram_auth_test_task.service;

import org.apache.commons.codec.binary.Hex;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import net.orekhov.telegram_auth_test_task.util.TelegramDataUtils;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.util.*;
import java.util.stream.Collectors;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç Telegram WebApp —á–µ—Ä–µ–∑ initData.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º HMAC-SHA256 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö.
 */
@Service
public class TelegramAuthService {

    private static final Logger logger = LoggerFactory.getLogger(TelegramAuthService.class);

    @Value("${telegram.bot.token}")
    private String botToken;

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —Ç–µ—Å—Ç–æ–≤).
     * @param token —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
     */
    public void setBotToken(String token) {
        this.botToken = token;
    }

    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç initData –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ä—Ç—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –≤–µ—Ä–Ω–∞.
     *
     * @param initData —Å—Ç—Ä–æ–∫–∞, –ø–æ–ª—É—á–µ–Ω–Ω–∞—è –æ—Ç Telegram WebApp
     * @return Optional —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –±–µ–∑ –ø–æ–ª—è hash
     */
    public Optional<Map<String, String>> validateAndExtractUserData(String initData) {
        if (initData == null || initData.isBlank()) {
            logger.warn("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –∏–ª–∏ null initData –ø–æ–ª—É—á–µ–Ω.");
            return Optional.empty();
        }

        Map<String, String> dataMap = TelegramDataUtils.parseInitData(initData);
        String hash = dataMap.remove("hash");

        if (hash == null) {
            logger.warn("‚ö†Ô∏è Hash –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ initData.");
            return Optional.empty();
        }

        String dataCheckString = dataMap.entrySet().stream()
                .sorted(Map.Entry.comparingByKey())
                .map(e -> e.getKey() + "=" + e.getValue())
                .collect(Collectors.joining("\n"));

        logger.debug("üì¶ dataCheckString:\n{}", dataCheckString);

        if (botToken == null || botToken.isBlank()) {
            logger.error("‚ùå botToken –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ application.properties.");
            return Optional.empty();
        }

        try {
            Mac hmac = Mac.getInstance("HmacSHA256");
            SecretKeySpec keySpec = new SecretKeySpec(
                    ("WebAppData" + botToken).getBytes(StandardCharsets.UTF_8),
                    "HmacSHA256"
            );
            hmac.init(keySpec);
            byte[] digest = hmac.doFinal(dataCheckString.getBytes(StandardCharsets.UTF_8));
            String calcHash = Hex.encodeHexString(digest);

            logger.debug("üîê –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π —Ö—ç—à: {}", calcHash);
            logger.debug("üÜö –û–∂–∏–¥–∞–µ–º—ã–π —Ö—ç—à: {}", hash);

            if (calcHash.equals(hash)) {
                logger.info("‚úÖ –•—ç—à —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞.");
                return Optional.of(dataMap);
            } else {
                logger.warn("‚ùå –•—ç—à –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –û–∂–∏–¥–∞–ª–æ—Å—å: {}, –ü–æ–ª—É—á–µ–Ω–æ: {}", calcHash, hash);
                return Optional.empty();
            }
        } catch (Exception e) {
            logger.error("üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ HMAC: {}", e.getMessage(), e);
            return Optional.empty();
        }
    }

    /**
     * –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ initData –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.
     *
     * @param initData —Å—Ç—Ä–æ–∫–∞ initData
     * @return true, –µ—Å–ª–∏ —Ö—ç—à –≤–∞–ª–∏–¥–µ–Ω
     */
    public boolean isInitDataValid(String initData) {
        return validateAndExtractUserData(initData).isPresent();
    }
}

